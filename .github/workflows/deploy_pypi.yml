name: Deploy to PyPI ðŸ“¦

#trigger deploy_to_pypi workflow once deploy_to_testpypi has successfully completed
on:
  workflow_run:
    workflows: [Deploy to TestPyPI ðŸ“¦]
    types: [completed]

  #allow for workflow to be manually initiated from the Actions tab, extra verification required for deployment
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "release" to confirm deploy to PyPI'
        required: true

jobs:
  test_success:
    timeout-minutes: 10
    name: Deploy to PyPI ðŸ“¦
    runs-on: ubuntu-latest         #platform: [ubuntu-latest, macos-latest, windows-latest]
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    strategy:
      matrix:
        python-version: [3.9]  #deploying using one Python version on 1 runner
    steps:
    - uses: actions/checkout@v4

    #build distribution package using poetry tool and upload to the PYPi server via custom github action
    - name: Build and publish to PyPI
      uses: JRubics/poetry-publish@v2.0
      with:
        pypi_token: ${{ secrets.PYPI_TOKEN }}

     #sleep for 30 seconds to ensure that distribution package has successfully been uploaded to PyPI
    - name: Wait / Sleep
      uses: jakejarvis/wait-action@v1
      with:
        time: '30s'

    #download package of iso3166_updates from PYPI server to ensure it uploaded correctly
    - name: Install iso3166_updates from PyPI
      run: |
        pip install iso3166_updates --upgrade
        python3 -c "import iso3166_updates"
        echo "iso3166-updates successfully installed"

  #test workflow was not successful so package not deployed to PyPI
  test_failure:
    name: Test workflow failure
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - run: echo "Test workflow failure, package not deployed to PyPI server"